/*
 * The MIT License
 *
 * Copyright 2023 SandBox.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.java.view;

import com.java.CommonLogger;
import com.java.CustomJRViewer;
import com.java.controller.CourierScheduleController;
import com.java.entity.CourierSchedule;
import com.java.entity.CourierScheduleRecords;
import java.io.InputStream;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author SandBox
 */
public class PrintCourierSchedule extends javax.swing.JFrame {

    private CourierScheduleController controller;
    private Map<String, String> branchList;
    
    private CommonLogger logger = new CommonLogger(PrintCourierSchedule.class.getName());

    /**
     * Creates new form PrintCourierSchedule
     */
    public PrintCourierSchedule() {
        initComponents();
        this.setIconImage(new ImageIcon("images/logo_1.png").getImage());

        txtFromDate.getSettings().setFormatForDatesCommonEra("dd-MM-yyyy");

        controller = new CourierScheduleController();
        try {
            branchList = controller.getBranchList();
            branchList.values().forEach(branch -> cbBranch.addItem(branch));
        } catch (SQLException ex) {
            logger.getLogger().log(Level.SEVERE, ex.getMessage(), ex);
            Logger.getLogger(PrintCourierSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbBranch = new javax.swing.JComboBox<>();
        txtFromDate = new com.github.lgooddatepicker.components.DatePicker();
        jLabel2 = new javax.swing.JLabel();
        btnViewDetails = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblScheduleDetails = new javax.swing.JTable();
        btnPrintSchedule = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Print Courier Schedule");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Branch");
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        cbBranch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select a Branch --" }));
        cbBranch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        txtFromDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setText("Date");
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnViewDetails.setText("View Schedule Details");
        btnViewDetails.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        tblScheduleDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Facility No", "Cheque Type", "Cheque No", "Amount", "Print"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblScheduleDetails.setFocusable(false);
        tblScheduleDetails.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblScheduleDetails.setRequestFocusEnabled(false);
        tblScheduleDetails.setRowHeight(25);
        tblScheduleDetails.setShowGrid(true);
        tblScheduleDetails.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblScheduleDetails);
        if (tblScheduleDetails.getColumnModel().getColumnCount() > 0) {
            tblScheduleDetails.getColumnModel().getColumn(0).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblScheduleDetails.getColumnModel().getColumn(1).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(2).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblScheduleDetails.getColumnModel().getColumn(3).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(4).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(5).setResizable(false);
            tblScheduleDetails.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        btnPrintSchedule.setText("Print Schedule");
        btnPrintSchedule.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPrintSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintScheduleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtFromDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(cbBranch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(134, 134, 134)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnViewDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPrintSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnViewDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPrintSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        clearTableData();
        if (cbBranch.getSelectedIndex() != 0 && !txtFromDate.getText().isEmpty()) {
            try {
                List<CourierScheduleRecords> details = controller.getTableDetails(cbBranch.getSelectedItem().toString(), txtFromDate.getDate());
                setDataToTable(details);
            } catch (SQLException ex) {
                logger.getLogger().log(Level.SEVERE, ex.getMessage(), ex);
                Logger.getLogger(PrintCourierSchedule.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnPrintScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintScheduleActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblScheduleDetails.getModel();
        List<CourierScheduleRecords> records = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
            if ((boolean) model.getValueAt(i, 5)) {
                CourierScheduleRecords record = new CourierScheduleRecords();
                record.setFacilityNo(model.getValueAt(i, 1).toString());
                record.setCourierBranch(cbBranch.getSelectedItem().toString());
                record.setChequeType(model.getValueAt(i, 2).toString());
                record.setChequeNo((int) model.getValueAt(i, 3));
                record.setChequeAmount((double) model.getValueAt(i, 4));
                record.setAddedDateTime(Timestamp.valueOf(txtFromDate.getDate().atStartOfDay()));
                record.setIsPrinted((boolean) model.getValueAt(i, 5));

                records.add(record);
            }
        }

        if(!records.isEmpty()) {
            reportGeneration(records);
            
            String user = System.getProperty("user.name");
            CourierSchedule schedule = new CourierSchedule();
            schedule.setCourierBranch(cbBranch.getSelectedIndex());
            schedule.setPrintedUser(user);
            // Update print status
            try {
                int scheduleId = controller.saveSchedule(schedule);
                controller.updateScheduleIdAndStatus(records, scheduleId);
            } catch (SQLException ex) {
                logger.getLogger().log(Level.SEVERE, ex.getMessage(), ex);
                Logger.getLogger(PrintCourierSchedule.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnPrintScheduleActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Dashboard dashboard = new Dashboard();
        dashboard.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void setDataToTable(List<CourierScheduleRecords> records) {
        DefaultTableModel model = (DefaultTableModel) tblScheduleDetails.getModel();
        int count = 1;
        for (CourierScheduleRecords record : records) {
            Object[] obj = {count, record.getFacilityNo(), record.getChequeType(), record.getChequeNo(),
                record.getChequeAmount(), record.isIsPrinted()};
            model.addRow(obj);
            count++;
        }
    }
    
    private void clearTableData() {
        DefaultTableModel tablMmodel = (DefaultTableModel) tblScheduleDetails.getModel();
        while (tablMmodel.getRowCount() > 0) {
          tablMmodel.removeRow(0);
        }
    }
    
    private void reportGeneration(List<CourierScheduleRecords> records) {
        String reportPath = "/CourierSchedule.jasper";
        
        // String currPath = System.getProperty("user.home") + "\\Downloads";
        // File currDir = new File(currPath);
        // String path = currDir.getAbsolutePath();
        // LocalDate today = LocalDate.now();
        // String outputPath = path + "\\Report_" + today + ".pdf";

        try {

            // Adding the additional parameters to the pdf.
            Map<String, Object> parameters = new HashMap<>();
            // Fetching the employees from the data source.
            JRBeanCollectionDataSource source = new JRBeanCollectionDataSource(records);
            // JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(records);

            // parameters.put("dataSource", source);
            parameters.put("User", System.getProperty("user.name"));
            parameters.put("Branch", cbBranch.getSelectedItem().toString());

            // Fetching the .jrxml file from the resources folder.
            InputStream stream = this.getClass().getResourceAsStream(reportPath);

            // System.out.println(stream.available() + "");
            // Compile the Jasper report from .jrxml to .japser
            // JasperReport report = JasperCompileManager.compileReport(stream);

            /*
             * Filling the report with the data and additional parameters information.
             */
            JasperPrint print = JasperFillManager.fillReport(stream, parameters, source);
            // JasperFillManager.fillReportToFile(reportPath, parameters, dataSource);
            // JasperExportManager.exportReportToPdfFile(print, outputPath);
            // JasperPrintManager.printReport( print, true);

            // View jasper report
            JasperViewer viewer = new JasperViewer(print, false);
            CustomJRViewer viewer1 = new CustomJRViewer(print);
            viewer.setTitle("Print Preview");
            viewer.add(viewer1);
            viewer.setVisible(true);

        } catch (JRException ex) {
            logger.getLogger().log(Level.SEVERE, ex.getMessage(), ex);
            Logger.getLogger(PrintCourierSchedule.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrintSchedule;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JComboBox<String> cbBranch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblScheduleDetails;
    private com.github.lgooddatepicker.components.DatePicker txtFromDate;
    // End of variables declaration//GEN-END:variables
}
